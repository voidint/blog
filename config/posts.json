{
  "posts": [
    {
      "content": "最近在公司内部搭建了一个[goproxy.io](https://goproxy.io/zh/)的服务，总结并记录一下备忘。\n\ngoproxy.io本身已经比较成熟，对部署也非常友好，按照官方的文档一步一步搭建应该都会比较顺利。当然我也不是对官方文档的无意义复制粘贴，我将从以下三个方面进行阐述：\n\n# goproxy.io服务的搭建\n- 安装go环境(要求1.13及以上版本)\n\n```shell\n\n$ yum install golang -y\n```\n\n- 安装git\n```shell\n\n$ yum install git -y\n```\n\n- 安装goproxy\n```shell\n\n$ mkdir -p /opt/goproxy && cd /opt/goproxy\n$ git clone https://github.com/goproxyio/goproxy.git\n$ cd goproxy\n$ make\n$ mv ./bin/goproxy /usr/local/bin/goproxy\n```\n\n- 启动goproxy服务（监听8080端口）\n```shell\n\n$ mkdir -p /opt/goproxy/go_cache\n$ goproxy -cacheDir /opt/goproxy/go_cache -exclude example.io -proxy https://goproxy.io -listen 0.0.0.0:8080\n```\n\n# 解决go get方式拉取私有库问题\n明确下目标。所谓的go get方式拉取私有库，指的是能通过`go get -u -v -insecure example.io/xxx/yyy`方式拉取到内部私有仓库中的go代码。example.io指的是内部的私有域名。\n\n假设已经按照以上步骤在10.0.1.2安装了goproxy.io服务。\n\n安装govanityurls服务（监听80端口）\ntonybai在其[博文](https://tonybai.com/2017/06/28/set-custom-go-get-import-path-for-go-package/)中说的很清楚了，我也就不重复了。贴一张他博文中的配图，一图胜千言。\n\n将内部私有域名example.io解析到安装了以上服务的10.0.1.2。\n\n# 开发人员本地环境配置\n临时开启Go Module\n```shell\n\n$ export GO111MODULE=on\n```\n\n永久开启Go Module\n```shell\n\n$ go env -w GO111MODULE=on\n```\n\n设置go源代码库拉取的代理地址（http://10.0.1.2:8080）\n```shell\n\n$ go env -w GOPROXY=\"http://10.0.1.2:8080,https://goproxy.cn,direct\"\n```\n\n可选：设置私有库（10.0.1.2上的goproxy服务本身也会将私有库重定向至gitlab.example.com）\n```shell\n\n$ go env -w GOPRIVATE=\"example.io\" \n```\n\n追加~/.gitconfig配置（修改为通过git下载源代码）\n```shell\n\n$ git config --global url.\"ssh://git@gitlab.example.com\".insteadOf \"http://gitlab.example.com\"\n```\n\n测试拉取外网的公开库\n```shell\n\n$ go get -u -v github.com/go-xorm/xorm \n```\n\n测试拉取内网的私有库（默认拉取master分支的最近一次提交）\n```shell\n\n$ go get -u -v -insecure example.io/voidint/tsdump\n```\n\n测试拉取内网的私有库的指定版本（强烈建议为每个版本打上tag）\n```shell\n\n$ go get -u -v -insecure example.io/voidint/tsdump@v1.0.0\n```\n\n# 参考\n- [部署公司内部自己的 goproxy.io 服务](https://goproxy.io/zh/docs/enterprise.html)\n- [定制Go Package的Go Get导入路径](https://tonybai.com/2017/06/28/set-custom-go-get-import-path-for-go-package/)\n- [使用govanityurls让私有代码仓库中的go包支持go get](https://tonybai.com/2017/06/30/go-get-go-packages-in-private-code-repo-by-govanityurls/)\n- [如何使用 go get 下载 gitlab 私有项目](http://holys.im/2016/09/20/go-get-in-gitlab/)\n\n\n\n\n",
      "data": {
        "title": "goproxy.io内部私有化部署",
        "date": "2020-03-14 17:58:28",
        "tags": [
          "goproxy.io",
          "golang"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/goproxyio-installation.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "goproxyio-installation"
    },
    {
      "content": "# 简介\n\n下面是[酷壳](https://coolshell.cn/articles/17010.html)给出的关于Linux Namespaces的介绍：\n\n>Linux Namespace是Linux提供的一种内核级别环境隔离的方法。不知道你是否还记得很早以前的Unix有一个叫chroot的系统调用（通过修改根目录把用户jail到一个特定目录下），chroot提供了一种简单的隔离模式：chroot内部的文件系统无法访问外部的内容。Linux Namespace在此基础上，提供了对UTS、IPC、mount、PID、network、User等的隔离机制。\n\n当前Linux一共实现了6种不同类型的Namespace\n\n| Namespace类型     | **系统调用参数** | **内核版本** | **隔离内容**               |\n| ----------------- | ---------------- | ------------ | -------------------------- |\n| Mount Namespace   | CLONE_NEWNS      | 2.4.19       | 挂载点（文件系统）         |\n| UTS Namespace     | CLONE_NEWUTS     | 2.6.19       | 主机名与域名               |\n| IPC Namespacce    | CLONE_NEWIPC     | 2.6.19       | 信号量、消息队列和共享内存 |\n| PID Namespace     | CLONE_NEWPID     | 2.6.24       | 进程编号                   |\n| Network Namespace | CLONE_NEWNET     | 2.6.29       | 网络设备、网络栈、端口等等 |\n| User Namespace    | CLONE_NEWUSER    | 3.8          | 用户和用户组               |\n\nNamespace的API主要使用如下3个系统调用：\n- clone(): 创建新进程。\n- unshare(): 将进程移出某个Namespace。\n- setns(): 将进程加入到Namespace中。\n\n# 体验\n## UTS Namespace\nUTS Namespace用于隔离nodename和domainname两个系统标识，即在不同的Namespace中允许拥有各自的hostname。\n\n```go\n// 在GOPATH下新建一个名为mydocker的目录，并在该目录下新建文件main.go。\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"bash\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags: syscall.CLONE_NEWUTS,\n\t}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tcmd.Env = append(cmd.Env, `PS1=\\[\\e[32;1m\\][\\u@\\h \\W]$>\\[\\e[0m\\]`)\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n以上代码通过exec.Command(\"bash\")方式fork了一个bash子进程，并且使用了CLONE_NEWUTS标识符去创建了一个Namespace。下面验证下bash子进程与mydocker父进程是否处于不同的的UTS Namespace中。\n\n```shell\n// 查看最初的系统hostname\n$ hostname\nubuntu14.04\n\n// 以root身份运行mydocker程序\n$ sudo ./mydocker\n\n// 在隔离的UTS Namespace下修改hostname为hello\nroot@ubuntu14:/home/voidint# hostname -b hello\nroot@ubuntu14:/home/voidint# hostname\nhello\n\n// 退出bash子进程并查看hostname是否发生变化\nroot@ubuntu14:/home/voidint# exit\nexit\n\n// 可以看到hostname并未发生变化\n$ hostname\nubuntu14.04\n```\n\n## PID Namespace\nPID Namespace用于隔离进程ID，同一个进程在不同的PID Namespace中可以拥有不同的PID。以docker容器为例，每个容器对于宿主机而言都是一个进程，若在容器内部查看到该进程的PID为1，但在宿主机上查看到的PID并非为1，这就是由于容器内拥有独立的PID Namespace的缘故。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"bash\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWIPC | syscall.CLONE_NEWPID,\n\t}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tcmd.Env = append(cmd.Env, `PS1=\\[\\e[32;1m\\][\\u@\\h \\W]$>\\[\\e[0m\\]`)\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n编译并运行以上程序，查看当前Namespace的PID，PID为1。\n\n```shell\n$ echo $$\n1\n```\n\n在宿主机上新开一个shell，并通过pstree -pl查看mydocker的PID为2692。注意，这里不能使用ps命令去查看，因为ps、top之类的命令会读取/proc目录下内容，由于此处并未进行Mount Namespace的隔离，查看到的/proc目录下内容并不真实和准确。\n\n## Mount Namespace\nMount Namespace用来隔离各个进程看到的挂载点视图。在Mount Namespace中调用mount()或者umount()都仅仅只是影响当前Namespace内的文件系统，对于全局的文件系统并没有影响。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"bash\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags: syscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWIPC |\n\t\t\tsyscall.CLONE_NEWPID |\n\t\t\tsyscall.CLONE_NEWNS,\n\t}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tcmd.Env = append(cmd.Env, `PS1=\\[\\e[32;1m\\][\\u@\\h \\W]$>\\[\\e[0m\\]`)\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n运行以上程序，在启动的bash子进程中执行ps -ef，依然可以看到宿主机上的所有进程，这是由于proc文件系统是继承自宿主机。下面重新挂载proc文件系统，并再次查看ps -ef的输出。\n\n```shell\n$ mount -t proc proc /proc\n\n$ ps -ef\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 18:11 pts/1    00:00:00 bash\nroot        14     1  0 18:16 pts/1    00:00:00 ps -ef\n```\n\n可以看到，重新挂载proc文件系统后，ps命令仅能看到容器内的进程了，符合预期。\n\n# 参考\n- [《自己动手写Docker》](https://www.amazon.cn/dp/B072ZDHK9S/ref=sr_1_1?ie=UTF8&qid=1535615095&sr=8-1&keywords=%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99docker)\n- [Namespaces](http://man7.org/linux/man-pages/man7/namespaces.7.html)\n- [DOCKER基础技术：LINUX NAMESPACE（上）](https://coolshell.cn/articles/17010.html)\n- [DOCKER基础技术：LINUX NAMESPACE（下）](https://coolshell.cn/articles/17029.html)\n- [Docker背后的内核知识——Namespace资源隔离](http://www.infoq.com/cn/articles/docker-kernel-knowledge-namespace-resource-isolation)",
      "data": {
        "title": "Linux Namespaces初体验",
        "date": "2020-02-25 17:45:51",
        "tags": [
          "Linux",
          "Namespace",
          "《自己动手写docker》"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/linux-namespaces-first-experience.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "linux-namespaces-first-experience"
    },
    {
      "content": "\n如何生成一个Linux用户登录密码？可能有人会说用passwd生成。的确，passwd命令能够帮助我们重置用户登录密码，但是这并没有解答如何生成一个Linux用户登录密码的疑问。\n\n对于这个问题，秉承着实用主义的精神，我原本也不会去深究。毕竟，安装的时候会设置密码，安装完毕后能通过passwd命令重置密码，学会这两点后已满足一般的需求已经绰绰有余了。\n\n但是，对于自动化而言，知道以上的两点是不够的。Linux的自动化安装过程中，设置用户登录密码这事，肯定不能有人为干预，否则谈什么自动化。操作系统安装完毕后，也有可能会有重置用户密码的自动化需求，此时使用passwd命令来重置用户密码，也不见得是最佳的选择。\n\n如果明白了密码的生成机制，那么这个自动化需求的难题也就迎刃而解了。\n\n# 密码生成理论\n有Linux基础的人一定知道，Linux的用户登录密码信息是存放在/etc/shadow文件当中的，并且该文件只有root用户能够访问。以下会以voidint这个用户为例，看一下这个用户的密码信息。\n\n```shell\n$ sudo cat /etc/shadow | grep voidint\n[sudo] password for voidint:\nvoidint:$6$3kheX/Vg$TGum9JEjfmGsj8Mfk3SUY/d/bWkJgnRimCxoaDTX7wcgrraYvU.fiziEUdpDglWc58uPZqWJhKNjiXayP9Q6b0:16892::::::\n```\n\n很明显，这个字符串被`:`符号分隔成了9段。我们这里只关注前两段，至于每一段具体的含义，可以戳这里自行阅读。第一段，是用户名称。第二段，即为用户密码。其实密码这种称呼并不准确。相对准确的说法是，用户密码明文经过某种哈希算法计算所获得的密文。但是，鉴于这个相对准确的说法实在太长太拗口，不便于表达。因此，以下提到的密码在无特别说明情况下，一律指的是密码明文的密文。\n\n言归正传，看到这里相信好多人会和我有一样的思考: 是不是只要知道了密码生成的算法，并按照此算法生成一个满足Linux要求的密码，再把密码覆盖这个第二段的内容，那么用户密码就被重置了吗？\n\n仔细看这段密码，会发现它是由`$xxx$xxx$xxx`的格式构成，即由`$`符号分隔的3端字符串构成。查阅资料后得知，这个格式可以进一步概括为`$id$salt$encrypted`。简要说明下`$id$salt$encrypted`中各个部分的含义:\n\n- id: 加密(确切说是哈希)所用算法的代号。\n    | **ID** | **Method**                                                   |\n    | ------ | ------------------------------------------------------------ |\n    | 1      | MD5                                                          |\n    | 2a     | Blowfish (not in mainline glibc; added in some Linux distributions) |\n    | 5      | SHA-256 (since glibc 2.7)                                    |\n    | 6      | SHA-512 (since glibc 2.7)                                    |\n- salt: 由程序随机生成的字符串，即盐。\n- encrypted: 用户密码明文字符串加盐后使用哈希算法所得的哈希值，即哈希(明文+盐)。\n\n## 特别说明\n资料中还提到了另外一种形式的密码——`$id$rounds=yyy$salt$encrypted`。其中，盐的部分换成了rounds=yyy。yyy是一个由用户(调用方)提供的[1000, 999999999]之间的整数。\n\n# 密码生成实践\n知道了上面这部分基础知识，那么接下来就是理论指导实践的环节了。具体可以借助什么工具来生成密码呢？这里使用的grub-crypt工具。你可以在某个Linux发行版中安装这个工具，也可以使用我提供的这个[dockerfile](https://github.com/voidint/dockerfile/tree/master/grub-crypt)。\n\n- 使用sha512算法生成密码\n\n```shell\n$ grub-crypt --sha-512\nPassword:\nRetype password:\n$6$r1jcut3Crl8bSIMo$XfKnrl4Ykzk2KPQ59MCXcUef9OjZWoZrIp7aeWwnCzIVQY1p/G1EiJQE4DYFej783NlvR5KtKYXs4P/hQaVst.\n```\n\n- 将生成的密码写入/etc/shadow文件\n\n```shell\n$ sudo cat /etc/shadow | grep voidint\nvoidint:$6$r1jcut3Crl8bSIMo$XfKnrl4Ykzk2KPQ59MCXcUef9OjZWoZrIp7aeWwnCzIVQY1p/G1EiJQE4DYFej783NlvR5KtKYXs4P/hQaVst.:16892:::::: \n```\n\n- 退出当前用户并使用新修改的密码登录\n\n# 参考\n- [CRYPT(3)](http://man7.org/linux/man-pages/man3/crypt.3.html)\n- [CentOS / RHEL 6 : How to password protect grub (Password-Protected Booting)](https://www.thegeekdiary.com/centos-rhel-6-how-to-password-protect-grub-password-protected-booting/)\n- [Command | kickstart之中rootpw密码生成方法](http://clavinli.github.io/2014/11/14/linux-command-hash-root-password-in-kickstart/)\n- [鸟哥的Linux私房菜——/etc/shadow文件结构](http://cn.linux.vbird.org/linux_basic/0410accountmanager.php#shadow_file)\n\n",
      "data": {
        "title": "Linux用户登录密码的生成",
        "date": "2020-02-25 17:24:33",
        "tags": [
          "Linux",
          "Password",
          "grub-crypt"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/linux-password.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "linux-password"
    },
    {
      "content": "# 什么是HP SSA CLI\nHP Smart Storage Administrator Command Line\n\n# 适用范围\nHP Smart Array G6、G7、G8、G9\n\n# 创建RAID的指导方针\n- 组成逻辑磁盘(RAID阵列)的物理驱动器应该是一致的。\n- 为了更好地利用物理驱动器的空间容量，组成RAID阵列的每一块物理驱动器的容量应该趋于一致的。如果物理驱动器在容量上有差异，以容量最小的为准。\n\n# HPSSACLI操作模式\n- Console mode: 交互式的带上下文的命令行模式。\n- Command mode:\n\n# 语法\n不管是console mode还是command mode，典型的HP SSA CLI由这几部分组成: target、command、parameter（如果需要的话）。\n\n<target> <command> [parameter=value]\n\n## target\ntarget是你所要配置的device的一种表示方法。device可以是controller、array、logical drive、physical drive。\n\n### 例子\n- controller slot=3\n- controller wwn=500805F3000BAC11\n- controller slot=2 array A\n- controller chassisname=\"A\" array B logicaldrive 2\n- controller chassisname=\"A\" physicaldrive 1:0\n- controller all\n- controller slot=2 array all\n- controller slot=3 physicaldrive 1:2-1:5\n\n## command\n### 配置类\n- add\n- create\n- delete\n- modify\n- remove\n- set target\n\n### 非配置类\n- diag\n- help\n- rescan\n- shorthand\n- show\n- version\n\n## 去除警告性提示\n对于一些可能对数据安全产生危险的操作，程序会要求输入y/n后才会实际执行。如果你并不希望如此，可以增加一个force的参数来实现这样的目的。\n\n比如，ctrl ch=\"Lab4\" ld 1 delete forced\n\n\n## show命令\n通过此命令可以获取关于目标设备的一些信息。\n\n基本的语法: <target> show [detail]|[status]\n\n# 典型用法\n## 删除目标设备\n### 语法\n```\n<target> delete [forced]\n```\n由于删除设备会导致数据丢失，属于危险操作。默认情况下，程序会显示警告性的提示信息并要求输入y/n。如果要规避这种情况，可以加上force参数。\n### 例子\n- ctrl ch=\"Lab 4\" delete forced\n- ctrl slot=3 ld all delete\n\n## 创建逻辑驱动器\n### 语法\n```\n<target> create type=ld [parameter=value]\n```\n一般而言<target>指的是controller，但如果是要在一个已经存在的阵列(array)基础上创建一个逻辑驱动器，那么<target>也可以是array。\n\n如果你想要在一组物理驱动器(physical drive)之上创建一个逻辑驱动器(logical drive)，那么不需要先去创建一个阵列(array)。CLI有别于GUI，阵列是在创建逻辑驱动器时自动创建的。\n\n### 例子\n- ctrl slot=5 create type=ld drives=1:0,1:1,1:3 raid=adg\n- ctrl slot=5 create type=ld drives=1:1-1:3 raid=adg\n- ctrl slot=5 create type=ld drives=1:7,1:10-2:5,2:8-2:12 raid=adg\n- ctrl slot=5 array A create type=ld size=330 raid=adg\n\n# 参考\n- [HP Smart Storage Administrator User Guide](https://community.hpe.com/hpeb/attachments/hpeb/itrc-264/148204/3/HP%20Smart%20Storage%20Administrator%20User%20Guide.pdf)",
      "data": {
        "title": "Linux下hpssacli配置 HP Smart Array",
        "date": "2020-02-25 17:05:06",
        "tags": [
          "RAID",
          "HPSSACLI"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/hp-ssa-cli.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "hp-ssa-cli"
    },
    {
      "content": "# 适用的controller\n- LSISAS3008\n- LSISAS3004\n\n# 名词解释\n- Controller:\n- IR:\n- Volume: 卷，基于物理驱动器通过创建冗余磁盘阵列所生成的虚拟磁盘。概念上等同于RAID冗余磁盘阵列。\n- Enclosure: 硬盘盒编号。\n- Bay: 即slot，指代硬盘盒的某个插槽。\n- HDD: Hard Disk Drive的缩写，即普通机械硬盘。\n- SSD: Solid State Drive的缩写，即固态硬盘。\n- SAS: 序列式SCSI（SAS：Serial Attached SCSI）是一种电脑集线的技术，其功能主要是作为周边零件的数据传输，例如：硬盘、CD-ROM等设备而设计的界面。\n- SATA: 串行ATA（Serial ATA: Serial Advanced Technology Attachment）是一种电脑总线，负责主板和大容量存储设备（如硬盘及光盘驱动器）之间的数据传输，主要用于个人电脑。\n\n# 语法\n```\nsas3ircu <controller_#> <command> <parameters>\n```\n\n# 通用参数\n- <controller_#>\n    controller编号是程序分配给PCI插槽上的RAID硬件的唯一编号。比如，某个设备上包含2块LSI SAS3008的RAID卡，那么编号0就代表这第一块RAID卡，而编号1就指代另一块。这个编号的取值范围是0~255之间的整数。\n\n- <Enclosure:Bay>\n    由硬盘盒编号(Enclosure)和插槽编号(Bay/Slot)组成的物理驱动器唯一标识。通过DISPLAY命令可以查看到此信息。\n\n# 退出码\n- 0: 命令执行成功。\n- 1: 错误的命令行参数或者操作失败。\n- 2: 未发现指定的adapter。\n\n# CREATE命令\n创建volume须准守以下规则:\n\n- 组成一个volume的多块磁盘，包括卷的热备盘在内，都必须是在同一个controller上。\n- 支持的RAID级别包括: RAID0、RAID1、RAID1E、RAID10。\n- 同一个controller上至多创建2个volume。\n- RAID级别与物理驱动器数量限制\n    - RAID0: Max=10; Min=2\n    - RAID1: Max=2; Min=2\n    - RAID1E: Max=10; Min=3\n    - RAID10: Max=10; Min=3\n- 每个controller上能创建1个或者2个hot spare disk。\n- 不允许跨SAS、SATA物理驱动器创建volume。\n- 不允许跨普通硬盘和固态硬盘创建volume。\n## 语法\n```\nsas3ircu <controller_#> create <volume_type> <size> {<Enclosure:Bay>} [VolumeName] [noprompt]\n```\n## 参数\n- <controller_#>: controller编号。\n- <volume_type>: volume类型。等价于RAID级别。可选值包括RAID0、RAID1、RAID1E、RAID10。\n- <size>: volume的容量大小，单位MB。MAX代表可用的最大容量值。\n- <Enclosure:Bay>:\n- [VolumeName]: 可选，volume名称。\n- [noprompt]: 可选，阻止在命令运行过程中产生的警告和交互式提示，即静默运行。\n\n# DELETE命令\n该命令用于删除指定controller下的所有的volume及其hot spare drives，但并不会对其它controller的配置参数产生任何影响。\n## 语法\n```\nsas3ircu <controller_#> delete [noprompt]\n```\n## 参数\n- <controller_#>: controller编号。\n- [noprompt]: 可选，阻止在命令运行过程中产生的警告和交互式提示，即静默运行。\n\n# DELETEVOLUME命令\n该命令用于删除指定controller下的指定volume及其hot spare drives，但并不会对其它controller的配置参数产生任何影响。如果某个hot spare对于剩余还未被删除的volume而言是不合适的，那么这个hot spare也会被删除。\n## 语法\n```\nsas3ircu <controller_#> deletevolume <volumeID> [noprompt]\n```\n## 参数\n- <controller_#>: controller编号。\n- <volumeID>: 待删除的volume ID。通过STATUS或者DISPLAY命令可以查看到volume ID相关的信息。\n- [noprompt]: 可选，阻止在命令运行过程中产生的警告和交互式提示，即静默运行。\n\n# DISPLAY命令\n该命令用于显示LSI SAS3 controller相关的配置信息，包括controller类型、固件版本、BIOS版本、volume信息、物理驱动器信息，以及enclosure。\n\n## 语法\n```\nsas3ircu <controller_#> display [filename]\n```\n\n## 参数\n- <controller_#>: controller编号。\n- [filename]: 可选，用于存储该命令输出的文件。\n\n## 命令输出样例\n```\nAvago Technologies SAS3 IR Configuration Utility.\nVersion 15.00.00.00 (2016.11.21) \nCopyright (c) 2009-2016 Avago Technologies. All rights reserved. \n\nRead configuration has been initiated for controller 0\n------------------------------------------------------------------------\nController information\n------------------------------------------------------------------------\n  Controller type                         : SAS3008\n  BIOS version                            : 8.29.02.00\n  Firmware version                        : 12.00.02.00\n  Channel description                     : 1 Serial Attached SCSI\n  Initiator ID                            : 0\n  Maximum physical devices                : 255\n  Concurrent commands supported           : 4096\n  Slot                                    : 0\n  Segment                                 : 0\n  Bus                                     : 1\n  Device                                  : 0\n  Function                                : 0\n  RAID Support                            : Yes\n------------------------------------------------------------------------\nIR Volume information\n------------------------------------------------------------------------\nIR volume 1\n  Volume ID                               : 323\n  Status of volume                        : Okay (OKY)\n  Volume wwid                             : 04b796b93430a2a7\n  RAID level                              : RAID1\n  Size (in MB)                            : 857353\n  Boot                                    : Primary\n  Physical hard disks                     :\n  PHY[0] Enclosure#/Slot#                 : 2:0\n  PHY[1] Enclosure#/Slot#                 : 2:1\n------------------------------------------------------------------------\nPhysical device information\n------------------------------------------------------------------------\nInitiator at ID #0\n\nDevice is a Hard disk\n  Enclosure #                             : 2\n  Slot #                                  : 0\n  SAS Address                             : 5000c50-0-9f3e-0741\n  State                                   : Optimal (OPT)\n  Size (in MB)/(in sectors)               : 858483/1758174767\n  Manufacturer                            : SEAGATE \n  Model Number                            : ST900MM0168     \n  Firmware Revision                       : N003\n  Serial No                               : W4009ZLH0000E739G08J\n  Unit Serial No(VPD)                     : W4009ZLH0000E739G08J\n  GUID                                    : 5000c5009f3e0743\n  Protocol                                : SAS\n  Drive Type                              : SAS_HDD\n\nDevice is a Hard disk\n  Enclosure #                             : 2\n  Slot #                                  : 1\n  SAS Address                             : 5000c50-0-9f40-be21\n  State                                   : Optimal (OPT)\n  Size (in MB)/(in sectors)               : 123/1758174767\n  Manufacturer                            : SEAGATE \n  Model Number                            : ST900MM0168     \n  Firmware Revision                       : N003\n  Serial No                               : S403EKZH0000E7400Z53\n  Unit Serial No(VPD)                     : S403EKZH0000E7400Z53\n  GUID                                    : 5000c5009f40be23\n  Protocol                                : SAS\n  Drive Type                              : SAS_SSD\n\nDevice is a Enclosure services device\n  Enclosure #                             : 2\n  Slot #                                  : 36\n  SAS Address                             : 500e004-a-aaaa-aa3e\n  State                                   : Standby (SBY)\n  Manufacturer                            : 12G SAS\n  Model Number                            : Expander        \n  Firmware Revision                       : RevB\n  Serial No                               : \n  Unit Serial No(VPD)                     : 500e004aaaaaaa3e\n  GUID                                    : N/A\n  Protocol                                : SAS\n  Device Type                             : Enclosure services device\n------------------------------------------------------------------------\nEnclosure information\n------------------------------------------------------------------------\n  Enclosure#                              : 1\n  Logical ID                              : 5a0086f5:dc780000\n  Numslots                                : 8\n  StartSlot                               : 0\n  Enclosure#                              : 2\n  Logical ID                              : 500e004a:aaaaaa3e\n  Numslots                                : 29\n  StartSlot                               : 0\n------------------------------------------------------------------------\nSAS3IRCU: Command DISPLAY Completed Successfully.\nSAS3IRCU: Utility Completed Successfully.\n```\n\n- IR Volume State可选值\n    - Okay(OKY): 活跃、有效。如果配置的RAID级别能够提供一定的数据保护，那么此时用户数据就是受保护状态。\n    - Degraded(DGD): 活跃、有效。由于配置已经发生了改变或者物理驱动器中某些处于不可用状态，用户数据实际上处于不完全受保护状态。\n    - Failed(FLD): 失败。\n    - Missing(MIS): 缺失。\n    - Initializing(INIT): 初始化中。\n    - Online(ONL): 已上线。\n- Physical device State可选值\n    - Online(ONL): 该物理驱动器是可用的并且已经是构成某个volume的一部分了。\n    - HotSpare(HSP): 该物理驱动器已经处于热备状态。一旦对应的volume中有物理驱动器发生故障不可用，该物理驱动器就会顶替发生故障的物理驱动器。\n    - Ready(RDY): 该物理驱动器已经处于预备(ready)状态，可以随时被当作一个普通的物理驱动器被使用，可以被分配到某个volume或者热备盘池(hot spare pool)。\n    - Available(AVL): 该物理驱动器可能并不处于预备(ready)状态，并且不适合作为volume的一个物理驱动器，也不适合作为热备盘池中的一员。\n    - Failed(FLD): 该物理驱动器发生故障或者已经下线。\n    - Missing(MIS): 该物理驱动器已经被移除或者处于无响应状态。\n    - Standby(SBY): 该设备不是一个硬盘设备。\n    - OutofSync(OSY): 该物理驱动器是某个volume的一部分，但是它并没有与同样是volume一部分的其他物理驱动器进行同步。\n    - Degraded(DGD): 该物理驱动器时某个volume的一部分并且处于降级(degraded)状态。\n    - Rebuilding(RBLD): 该物理驱动器时某个volume的一部分并且处于重建(rebuilding)状态。\n    - Optimal(OPT): 该物理驱动器时某个volume的一部分并且处于最优(optimal)状态。\n- Physical device的Drive Type属性可选值\n    - SAS_HDD: 物理驱动器是SAS普通机械硬盘。\n    - SATA_HDD: 物理驱动器是SATA普通机械硬盘。\n    - SAS_SSD: 物理驱动器是SAS固态硬盘。\n    - SATA_SSD: 物理驱动器是SATA固态硬盘。\n- Physical device的Protocol属性可选值\n    - SAS: 物理驱动器支持SAS协议。\n    - SATA: 物理驱动器支持SATA协议。\n\n# HOTSPARE命令\n该命令用来给热备池中添加或者删除一个物理驱动器。待添加的物理驱动器存储容量不能小于volume中各个物理驱动器存储容量最小的那个物理驱动器的存储容量。若想要确定各个物理驱动器的存储容量等信息，请参考DISPLAY命令。\n\n创建热备盘时须准守以下规则:\n- 创建热备盘前至少已经存在一个RAID级别为RAID 1、RAID 10、RAID 1E的volume。因为RAID 0不具备数据冗余特性，因此无法为此创建热备盘。\n- 可以为状态是inactive的volume创建热备盘。\n- 对于HDD而言，若当前controller上的所有volume使用的是SATA磁盘，那么可以添加SAS的热备盘。若当前controller上的所有volume使用的是SAS磁盘，则无法再添加SATA的热备盘。\n- 对于SSD而言，只要RAID卡固件允许，允许为SATA的volume添加SAS的热备盘，也可以为SAS的volume添加SATA的热备盘。\n- 每个controller最多添加2块热备盘。\n- SSD可以作为HDD类型的volume的热备盘，HDD不可以作为SSD类型volume的热备盘。\n\n## 语法\n```\nsas3ircu <controller_#> hotspare [delete] <Enclosure:Bay>\n```\n\n## 参数\n- <controller_#>: controller编号。\n- <Enclosure:Bay>: 硬盘盒编号+物理驱动器编号，可以唯一标识一块物理驱动器。\n- [delete]: 可选。加上此参数意味着执行的是删除热备盘的操作，反之，则是添加热备盘操作。\n\n# STATUS命令\n该命令会显示当前已经存在volume，以及当前还在进行中的操作的状态。\n\n## 语法\n```\nsas3ircu <controller_#> status\n```\n\n## 参数\n- <controller_#>: controller编号。\n\n# LIST命令\n该命令显示当前系统中的所有controller及其controller index组成的列表。\n\n## 语法\nsas3ircu list\n\n# 参考\n- [SAS-3 Integrated RAID Configuration Utility (SAS3IRCU)](https://docs.broadcom.com/docs/12353382)\n- [LSI SAS3008文档](https://support.huawei.com/enterprise/zh/doc/EDOC1000004345/b4b05091#it_server_sas3008_700035)\n- [Disk Enclosure](https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98%E7%9B%92)\n- [HDD](https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98)\n- [SSD](https://zh.wikipedia.org/wiki/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98)\n- [SAS](https://zh.wikipedia.org/wiki/%E4%B8%B2%E5%88%97SCSI)\n- [SATA](https://zh.wikipedia.org/wiki/SATA)\n\n\n\n\n",
      "data": {
        "title": "SAS3IRCU配置LSI SAS3系列RAID卡",
        "date": "2020-02-25 16:43:06",
        "tags": [
          "RAID",
          "SAS3IRCU"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/sas3ircu.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "sas3ircu"
    },
    {
      "content": "# 场景描述\n假设你创建了一个文件，并写入了一些内容，然后通过git add和git commit将此变更提交。提交之后才发现这个文件中少了一些内容，此时有两个选择摆在你面前：\n\n- 将文件内容补全，然后和之前一样git add、git commit。显然，你可以通过git log看到这两条commit记录。\n- 回到过去，修改上一次提交的那个文件。如此一来，你的commit记录只会有一条。对于一些有代码洁癖并且看中git commit记录的程序员，这点很重要，特别是在开源项目中。\n\n# 场景再现\n初始化git仓库\n\n```shell\n$ mkdir test && cd test && git init\n```\n\n第一次commit内容\n\n```shell\n$ echo 'Hello world' > README.md\n$ git add .\n$ git commit -m \"Add README.md\"\n$ git log --oneline\nc56f680 Add README.md\n```\n\n修改文件内容并合并到上一次的commit变更当中\n\n```shell\n$ echo 'Hello voidint' >> README.md\n$ git add .\n$ git commit --amend --no-edit\n$ git log --oneline\neb6c8cb Add README.md // hash值发生了变化\n```\n\n可以看到，在执行git commit --amend --no-edit之后，hash值由c56f680变成了eb6c8cb，但是message内容并没有发生变化，并且最重要的是只有一条commit记录。\n\n如果要修改上一条的message，那么去掉--no-edit选项即可，git commit --amend -m \"xxxx\"。同理，commit记录同样只会有一条。",
      "data": {
        "title": "git commit message后悔药",
        "date": "2020-02-25 16:33:19",
        "tags": [
          "git"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/git-commit-amend.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "git-commit-amend"
    },
    {
      "content": "从docker hub拉取的MySQL官方docker镜像，启动MySQL容器后，执行`select now()`语句，发现显示的时间与我宿主机的时间不一致且相差8小时。显然，需要重置MySQL的时区，将时区设置与宿主机保持一致，即东八区。\n\n# 如何为MySQL设置时区？\n[MySQL 5.7官方文档](https://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html)中提到了多种设置时区的方案，我们这里仅关注配置文件（MySQL官方称之为[Option Files](https://dev.mysql.com/doc/refman/5.7/en/option-files.html)）的方案。\n\n## 配置文件中修改时区\n- 配置项default-time-zone及取值\n    依据文档可以通过在配置文件中增加default-time-zone='timezone'的配置项来修改时区。配置值的取值遵循以下规则：\n\n    >- The value 'SYSTEM' indicates that the time zone should be the same as the system time zone.\n    >\n    >- The value can be given as a string indicating an offset from UTC, such as '+10:00' or '-6:00'.\n    >\n    >- The value can be given as a named time zone, such as 'Europe/Helsinki', 'US/Eastern', or 'MET'. Named time zones can be used only if the time zone information tables in the mysql database have been created and populated.\n\n    我们选择第二种方式，通过UTC的偏移量来表示东八区，+8:00意味着在零时区的基础上往东偏移8个时区。\n- group\n    官方文档中描述了配置文件的语法，包括注释、组、选项名、选项值等。其中组（group）是与我们当前遇到的问题息息相关的东西。配置项需要放置在正确的group下，官方表述如下：\n\n    > If an option group name is the same as a program name, options in the group apply specifically to that program.\n    > For example, the [mysqld] and [mysql] groups apply to the mysqld server and the mysql client program, respectively.\n\n由于配置项default-time-zone是为了让MySQL Server调整默认时区，并结合上面有关group的表述，不难得出一个结论：default-time-zone配置项应该放置在名为[mysqld]的group下。\n\n```shell\n[mysqld]\ndefault-time_zone = '+8:00'\n```\n\n## 配置文件位置\n既然已经明确了通过修改配置文件来达到重置MySQL时区的目的，那么修改后的配置文件放哪儿呢？这是首先面临的一个问题。好在MySQL官方文档中已经告诉我们配置文件的读取顺序。\n\n| **File Name**       | **Purpose**                                     |\n| ------------------- | ----------------------------------------------- |\n| /etc/my.cnf         | Global options                                  |\n| /etc/mysql/my.cnf   | Global options                                  |\n| *SYSCONFDIR*/my.cnf | Global options                                  |\n| $MYSQL_HOME/my.cnf  | Server-specific options (server only)           |\n| defaults-extra-file | The file specified with `--defaults-extra-file` |\n| ~/.my.cnf           | User-specific options                           |\n| ~/.mylogin.cnf      | User-specific login path options (clients only) |\n\n再尝试查看MySQL的docker容器中的配置文件，docker run --rm mysql:5.7 cat /etc/mysql/my.cnf，我们看到了容器中的配置文件内容如下：\n\n```\n# Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n\n!includedir /etc/mysql/conf.d/\n!includedir /etc/mysql/mysql.conf.d/\n```\n\n\n这下这个疑问终于有了答案，我们可以将自定义的配置文件想办法放入容器中的/etc/mysql/conf.d/目录（放在/etc/mysql/mysql.conf.d/目录当然也同样OK）。\n\n注意：在*nix系统下使用!includedir指令指定的配置文件目录下的配置文件扩展名必须是.cnf，在Windows系统下的扩展名可以是.ini或者.cnf。\n\n## 启动MySQL容器\n\n```shell\n$ docker run  -d --name mysql5.7 \\\n    -v /Users/voidint/dockerV/mysql/5.7/conf:/etc/mysql/conf.d \\\n    -e MYSQL_ROOT_PASSWORD='abc#123' \\\n    -p 3306:3306\\\n    mysql:5.7\n```\n\n参考MySQL官方docker镜像的说明，我们将上面步骤准备好的MySQL配置文件放置在/Users/voidint/dockerV/mysql/5.7/conf目录下，并通过docker -v选项将宿主机上的配置文件目录挂载到容器中的/etc/mysql/conf.d目录。这样在容器启动时就能读取到我们自定义的配置文件，时区配置也就生效了。\n\n容器启动后，通过MySQL客户端连接上MySQL，再次执行select now()语句以验证MySQL的时区是否与宿主机时区保持一致。\n\n# 参考\n- [MySQL Server Time Zone Support](https://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html)\n- [Using Option Files](https://dev.mysql.com/doc/refman/5.7/en/option-files.html)\n- [MySQL Docker镜像](https://hub.docker.com/_/mysql)\n",
      "data": {
        "title": "容器内MySQL时区调整",
        "date": "2020-02-25 16:08:07",
        "tags": [
          "MySQL",
          "timezone",
          "docker"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/mysql-timezone.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "mysql-timezone"
    },
    {
      "content": "我在自己的mac上安装了docker，并在docker中运行了mysql5.6容器。启动容器的方式大致如下：\n```shell\n$ docker run --name mydb -d \\\n    -p 3306:3306 \\\n    -v /Users/voidint/dockerV/mysql/data:/var/lib/mysql \\\n    -e MYSQL_ROOT_PASSWORD=xxxxx \\\n    mysql:5.6\n```\n\nmysql服务正常启动之后，我想通过客户端连接此服务。于是，我顺理成章地在终端敲下了这样的命令\n```shell\n$ mysql -u root -p\nEnter password:\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)\n```\n\n非常意外，居然报错了。我记得以前都是这样敲的呀？怎么换成跑在docker里就行不通了？不科学！\n\n```shell\n$ mysql -h localhost -uroot -p\nEnter password:\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)\n```\n\n加上`-h`选项还是不行，气急败坏。气归气，问题还是要解决的，那就查查资料。然后，看到了这篇，在粗粗浏览过之后，发现有人建议用`-h 127.0.0.1`。\n\n```shell \n$ mysql -h 127.0.0.1 -u root -p \nEnter password:\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 3823\nServer version: 5.6.35 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n```\n\n试过之后，发现效果立竿见影。这简直颠覆了我的既有观念！\n\n- 难道localhost和127.0.0.1不是同一个东西？OMG！\n- 那个socket文件/tmp/mysql.sock又是怎么一回事，指定了127.0.0.1怎么就正常了？\n\n在查阅了一些资料之后，终于对于这几个问题有了稍深入的理解：\n\n# localhost和127.0.0.1的区别\n- localhost和127.0.0.1，前者是域名，后者是IP地址中特殊的一类回还地址。\n- 许多时候localhost和127.0.0.1给人感觉是等价的，是由于在多数系统的/etc/hosts文件中，两者存在映射关系。\n- 本机上的服务，如果通过localhost访问，可以不经过网卡，并且不受防火墙的限制。如果不经过网卡，那客户端和服务端要如何通信？答案就是socket。比如上面例子中的/tmp/mysql.sock。也因为不需要经过网卡，不需要TCP/IP协议的层层封包和层层解包过程，性能上会更出色一些。\n- 本机上的服务，如果通过127.0.0.1访问，需要经过网卡，也可能受到防火墙限制。\n\n# 参考资料\n- https://hub.docker.com/_/mysql/\n- http://stackoverflow.com/questions/11657829/error-2002-hy000-cant-connect-to-local-mysql-server-through-socket-var-run\n- http://blog.onlycatch.com/post/7e371ca28621\n- http://i.joymvp.com/%E6%8A%80%E6%9C%AF/routing-traffic-localhost.html",
      "data": {
        "title": "为什么mysql -h localhost无法登录了？",
        "date": "2020-02-25 15:56:49",
        "tags": [
          "MySQL",
          "localhost"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/mysql-login-localhost.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "mysql-login-localhost"
    }
  ],
  "tags": [
    {
      "name": "goproxy.io",
      "slug": "6TP6jleIZ",
      "used": true
    },
    {
      "name": "golang",
      "slug": "aIzzN5whUg",
      "used": true
    },
    {
      "name": "Namespace",
      "slug": "JL2GpPi2O",
      "used": true
    },
    {
      "name": "《自己动手写docker》",
      "slug": "5ZjDildnVp",
      "used": true
    },
    {
      "name": "Linux",
      "slug": "4O9HoKSI-",
      "used": true
    },
    {
      "name": "Password",
      "slug": "JM8rmuLt4Q",
      "used": true
    },
    {
      "name": "grub-crypt",
      "slug": "7KjWi2fA3s",
      "used": true
    },
    {
      "name": "HPSSACLI",
      "slug": "UqSp3pO-3",
      "used": true
    },
    {
      "name": "RAID",
      "slug": "PAYpxEtAC",
      "used": true
    },
    {
      "name": "SAS3IRCU",
      "slug": "8ChdujAc0W",
      "used": true
    },
    {
      "name": "git",
      "slug": "JFSNzrvJI",
      "used": true
    },
    {
      "name": "timezone",
      "slug": "r6k_9Mi2R",
      "used": true
    },
    {
      "name": "docker",
      "slug": "EBKzSjP46S",
      "used": true
    },
    {
      "name": "MySQL",
      "slug": "upBZVsJSS",
      "used": true
    },
    {
      "name": "localhost",
      "slug": "y6nbpIRFho",
      "used": true
    },
    {
      "name": "linux",
      "slug": "qFpL6WSF3",
      "used": false
    },
    {
      "name": "namespaces",
      "slug": "gX1A_Kwp4f",
      "used": false
    },
    {
      "name": "Gridea",
      "slug": "7dumky1lK",
      "used": false
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "首页",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "标签",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "关于",
      "openType": "Internal"
    }
  ]
}